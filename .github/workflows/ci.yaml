name: CI
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # This imitates the dev/docker/local/install.sh script.
      - run: mkdir -p repos/undefx
      - name: Checkout undefx/py3tester
        uses: actions/checkout@v2
        with:
          repository: undefx/py3tester
          path: repos/undefx/py3tester
      - name: Checkout undefx/undef-analysis
        uses: actions/checkout@v2
        with:
          repository: undefx/undef-analysis
          path: repos/undefx/undef-analysis

      - run: mkdir -p repos/delphi
      - name: Checkoutcmu-delphi/operations
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/operations
          path: repos/delphi/operations
      - name: Checkout cmu-delphi/utils
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/utils
          path: repos/delphi/utils
      - name: Checkout cmu-delphi/github-deploy-repo
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/github-deploy-repo
          path: repos/delphi/github-deploy-repo
      - name: Checkout THIS REPO
        uses: actions/checkout@v2
        with:
          path: repos/delphi/delphi-epidata
      - name: Checkout cmu-delphi/flu-contest
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/flu-contest
          path: repos/delphi/flu-contest
      - name: Checkout cmu-delphi/nowcast
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/nowcast
          path: repos/delphi/nowcast

      - run: |
          ln -s repos/delphi/delphi-epidata/dev/local/Makefile
          ln -s repos/delphi/delphi-epidata/dev/local/docker-compose.yaml
          ln -s repos/delphi/delphi-epidata/dev/local/.dockerignore
          ln -s repos/delphi/delphi-epidata/dev/local/pyproject.toml repos/
          ln -s repos/delphi/delphi-epidata/dev/local/setup.cfg repos/

      - name: Run tests
        run: |
          make test

      - name: Clean Up
        run: |
          docker compose down

  build_js_client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/client/packaging/npm
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node2-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node2-
      - run: npm ci
      - run: npm test

  image:
    needs: build
    # only on main and dev branch
    # TODO: #1112 Remove `|| github.ref == 'refs/heads/api-keys'` after transition to production status.
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/api-keys'

    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: cmu-delphi-deploy-machine
          password: ${{ secrets.CMU_DELPHI_DEPLOY_MACHINE_PAT }}
      - name: Build Image
        env:
          DEVOPS_DOCKER_FILE: ./devops/Dockerfile
        run: |
          docker build -t repo --file ${DEVOPS_DOCKER_FILE} .
      - name: Resolve Tag
        id: tagname
        run: |
          baseRef="${GITHUB_REF#*/}"
          imageTag="${baseRef#*/}"
          if [ "$imageTag" = "main" ] ; then
            imageTag="latest"
          fi
          echo "::set-output name=tag::$imageTag"
          echo "::set-output name=repo::ghcr.io/${{ github.repository }}"
      - name: Push Dev Tag
        run: |
          docker tag repo ${{ steps.tagname.outputs.repo }}:${{ steps.tagname.outputs.tag }}
          docker push ${{ steps.tagname.outputs.repo }}:${{ steps.tagname.outputs.tag }}
      # - name: Extract version
      #   if: startsWith(github.ref, 'refs/heads/main')
      #   id: extract_version
      #   run: node -pe "'::set-output name=version::' + require('./package.json').version"
      - name: Trigger Webhook
        run: |
          # trigger a webhook update
          curl -H "Authorization: Bearer ${{ secrets.DELPHI_DEPLOY_WEBHOOK_TOKEN }}" \
               -X POST ${{ secrets.DELPHI_DEPLOY_WEBHOOK_URL }} \
               -H "Content-Type: application/x-www-form-urlencoded" \
               -d "repository=${{ steps.tagname.outputs.repo }}&tag=${{ steps.tagname.outputs.tag }}"
      # - name: Push Version Tag Tag
      #   if: startsWith(github.ref, 'refs/heads/main')
      #   run: |
      #     docker tag repo ${{ steps.tagname.outputs.repo }}:v${{ steps.extract_version.outputs.version }}
      #     docker push ${{ steps.tagname.outputs.repo }}:v${{ steps.extract_version.outputs.version }}
