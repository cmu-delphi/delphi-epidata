name: Performance testing

# Run when a PR comment is created (issues and PRs are considered the same entity in the GitHub API)
on:
  issue_comment:
    types: [created]

# Add some extra perms to comment on a PR
permissions:
  pull-requests: write
  contents: read

jobs:
  run-perftests:
    # Make sure 1. this is a PR, not an issue 2. it contains "/run performance test" anywhere in the body
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/run performance test')
    runs-on: ubuntu-latest
    steps:
      - name: Set up WireGuard
        uses: egor-tensin/setup-wireguard@v1.2.0
        with:
          endpoint: '${{ secrets.WG_PERF_ENDPOINT }}'
          endpoint_public_key: '${{ secrets.WG_PERF_ENDPOINT_PUBLIC_KEY }}'
          ips: '${{ secrets.WG_PERF_IPS }}'
          allowed_ips: '${{ secrets.WG_PERF_ALLOWED_IPS }}'
          private_key: '${{ secrets.WG_PERF_PRIVATE_KEY }}'
      - name: Check out repository
        uses: actions/checkout@v3
      # Previous step checks out default branch, so we check out the pull request's branch
      - name: Switch to PR branch
        run: |
          hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up repository # mimics install.sh in the README except that delphi is cloned from the PR rather than main
        run: |
          cd ..
          mkdir -p driver/repos/delphi
          cd driver/repos/delphi
          git clone https://github.com/cmu-delphi/operations
          git clone https://github.com/cmu-delphi/utils
          git clone https://github.com/cmu-delphi/flu-contest
          git clone https://github.com/cmu-delphi/nowcast
          cd ../../

          cd ..
          cp -R delphi-epidata driver/repos/delphi/delphi-epidata
          cd -

          ln -s repos/delphi/delphi-epidata/dev/local/Makefile
      - name: Build & run epidata
        run: |
          cd ../driver
          sudo make web sql="${{ secrets.DB_CONN_STRING }}"
      - name: Build & run Locust
        run: |
          cd ../driver/repos/delphi/delphi-epidata/tests/performance
          docker build -t locust .
          docker run --net=host -v $PWD:/mnt/locust -e CSV=/mnt/locust/v4-requests-smaller.csv locust -f /mnt/locust/v4.py --host http://127.0.0.1:8080/ --users 10 --spawn-rate 1 --headless -t 15m

  comment-output:
    runs-on: ubuntu-latest
    if: success() || failure() # but not if skipped
    needs: run-perftests
    steps:
      - name: Comment run results
        # URL that links to run results
        env:
          GITHUB_WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Performance tests complete! Click here to view results: ${{ env.GITHUB_WORKFLOW_URL }}'
            })
  