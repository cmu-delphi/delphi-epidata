# Guide (user-friendly):
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

# Specification (technical, formal):
# https://packaging.python.org/en/latest/specifications/pyproject-toml/


# Choosing a build backend:
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend
[build-system]
# A list of packages that are needed to build your package:
requires = ["setuptools>=61.0.0"] # REQUIRED if [build-system] table is used
# The name of the Python object that frontends will use to perform the build:
build-backend = "setuptools.build_meta" # If not defined, then legacy behavior can happen.


[project]
name = "delphi_epidata" # REQUIRED, is the only field that cannot be marked as dynamic.
version = "4.1.23"
description = "A programmatic interface to Delphi's Epidata API."
readme = "README.md"
requires-python = ">=3.8"

license = { file = "LICENSE" }

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [{ name = "David Farrow", email = "dfarrow0@gmail.com" }]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
# maintainers = [
#     { name = "A. Great Maintainer", email = "maintainer@example.com" },
# ]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    # Pick your license as you wish
    "License :: OSI Approved :: MIT License",

    # Specify the Python versions you support here. In particular, ensure
    # that you indicate you support Python 3. These classifiers are *not*
    # checked by "pip install". See instead "requires-python" key in this file.
    "Programming Language :: Python",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = ["aiohttp", "delphi-utils", "requests>=2.7.0", "tenacity"]


# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]
"Homepage" = "https://github.com/cmu-delphi/delphi-epidata"
"Changelog" = "https://github.com/cmu-delphi/delphi-epidata/blob/main/src/client/packaging/pypi/CHANGELOG.md"
